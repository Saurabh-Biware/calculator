{"ast":null,"code":"// @ts-ignore\nimport * as Parser from \"./parser/formula-parser.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/formula-builder.service\";\nimport * as i2 from \"./components/tree-visualizer/tree-visualizer.component\";\nconst parse = Parser.parse;\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(formulaService) {\n      this.formulaService = formulaService;\n      this.formula = \"($b + SQRT (SQR($b) - 4 * $a)) / (2 * $a)\";\n      this.visualizerOutput = \"\";\n      this.syntaxTreeJson = \"\";\n    }\n\n    ngOnInit() {\n      this.formulaService.syntaxTree$.subscribe(tree => {\n        this.syntaxTreeJson = tree ? JSON.stringify(tree, null, 2) : \"No AST available.\";\n      });\n    }\n\n    updateAstView() {\n      try {\n        const tree = parse(this.formula);\n        console.log(\"The AST is: \", tree);\n        this.syntaxTreeJson = JSON.stringify(tree, null, 2);\n        this.formulaService.setSyntaxTree(tree);\n      } catch (error) {\n        alert(\"Parsing error: Please double check the input formula.\");\n        this.syntaxTreeJson = \"Error parsing formula.\";\n        this.formulaService.setSyntaxTree(null);\n      }\n    }\n\n    astToFormula(node) {\n      if (!node) return \"\";\n\n      switch (node.type) {\n        case \"ADDITION\":\n          return `${this.astToFormula(node.left)} + ${this.astToFormula(node.right)}`;\n\n        case \"SUBTRACTION\":\n          return `${this.astToFormula(node.left)} - ${this.astToFormula(node.right)}`;\n\n        case \"MULTIPLICATION\":\n          return `${this.astToFormula(node.left)} * ${this.astToFormula(node.right)}`;\n\n        case \"DIVISION\":\n          return `(${this.astToFormula(node.left)}) / (${this.astToFormula(node.right)})`;\n\n        case \"POWER\":\n          return `${this.astToFormula(node.expression)} ^ ${this.astToFormula(node.power)}`;\n\n        case \"NEGATION\":\n          return `-${this.astToFormula(node.expression)}`;\n\n        case \"PAREN\":\n          return `(${this.astToFormula(node.expression)})`;\n\n        case \"NUMBER\":\n          return node.value.toString();\n\n        case \"E\":\n          return \"E\";\n\n        case \"PI\":\n          return \"PI\";\n\n        case \"VARIABLE\":\n          return node.name;\n\n        case \"FUNCTION\":\n          const args = node.arguments.map(arg => this.astToFormula(arg)).join(\", \");\n          return `${node.name}(${args})`;\n\n        default:\n          return \"\";\n      }\n    }\n\n    convertAstToFormula() {\n      const tree = this.formulaService.syntaxTreeSource.getValue();\n\n      if (!tree) {\n        this.visualizerOutput = \"No AST to convert.\";\n        return;\n      }\n\n      try {\n        this.visualizerOutput = this.astToFormula(tree);\n        console.log(\"Converted formula:\", this.visualizerOutput);\n      } catch (error) {\n        console.error(\"Conversion error:\", error);\n        this.visualizerOutput = \"Error converting AST to formula.\";\n      }\n    }\n\n    onFormulaChange(event) {\n      this.formula = event.target.value;\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormulaBuilderService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 26,\n    vars: 3,\n    consts: [[\"cols\", \"100\", \"rows\", \"4\", 3, \"value\", \"input\"], [3, \"click\"], [2, \"max-height\", \"300px\", \"overflow-y\", \"auto\", \"background-color\", \"#eeeeee\"], [1, \"formula-output\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"h1\");\n        i0.ɵɵtext(2, \"Welcome to the Formulizer!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"h3\");\n        i0.ɵɵtext(4, \"Input Formula\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\");\n        i0.ɵɵelementStart(6, \"textarea\", 0);\n        i0.ɵɵlistener(\"input\", function AppComponent_Template_textarea_input_6_listener($event) {\n          return ctx.onFormulaChange($event);\n        });\n        i0.ɵɵtext(7, \"        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵelementStart(10, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n          return ctx.updateAstView();\n        });\n        i0.ɵɵtext(11, \"Parse and update AST View\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"h3\");\n        i0.ɵɵtext(13, \"Syntax Tree (JSON)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"pre\", 2);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"h3\");\n        i0.ɵɵtext(17, \"Visualizer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"app-tree-visualizer\");\n        i0.ɵɵelementStart(19, \"p\");\n        i0.ɵɵelementStart(20, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_20_listener() {\n          return ctx.convertAstToFormula();\n        });\n        i0.ɵɵtext(21, \"Convert AST to Formula\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"h3\");\n        i0.ɵɵtext(23, \"Visualizer-to-Formula\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 3);\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"value\", ctx.formula);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate(ctx.syntaxTreeJson || \"No AST available.\");\n        i0.ɵɵadvance(10);\n        i0.ɵɵtextInterpolate1(\" \", ctx.visualizerOutput, \" \");\n      }\n    },\n    directives: [i2.TreeVisualizerComponent],\n    styles: [\".formula-output[_ngcontent-%COMP%]{padding:15px;border:2px solid #4CAF50;border-radius:8px;background-color:#f9f9f9;font-size:1.2em;font-family:\\\"Courier New\\\",Courier,monospace;color:#333;box-shadow:2px 2px 12px #0000001a;margin-bottom:20px}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}