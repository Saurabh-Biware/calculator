{"ast":null,"code":"// app.component.spec.ts\nimport { TestBed, async } from \"@angular/core/testing\";\nimport { FormsModule } from \"@angular/forms\"; // Import FormsModule for ngModel\n\nimport { of } from \"rxjs\";\nimport { AppComponent } from \"./app.component\";\nimport { FormulaBuilderService } from \"./services/formula-builder.service\"; // Create a mock FormulaBuilderService\n\nclass MockFormulaBuilderService {\n  constructor() {\n    this.syntaxTree$ = of(null);\n  }\n\n  setSyntaxTree(tree) {// Mock implementation: Do nothing\n  }\n\n  deleteNode(path) {// Mock implementation: Do nothing\n  }\n\n}\n\ndescribe(\"AppComponent\", () => {\n  let component;\n  let fixture;\n  let formulaService;\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [FormsModule],\n      providers: [{\n        provide: FormulaBuilderService,\n        useClass: MockFormulaBuilderService\n      } // Provide the mock service\n      ]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    formulaService = TestBed.inject(FormulaBuilderService);\n    fixture.detectChanges(); // Trigger initial data binding\n  }); // Test Case 1: Component Creation\n\n  it(\"should create the app\", () => {\n    expect(component).toBeTruthy();\n  }); // Test Case 2: Initial Property Values\n\n  it(\"should have the default formula\", () => {\n    expect(component.formula).toEqual(\"($b + SQRT(SQR($b) - 4 * $a)) / (2 * $a)\");\n  });\n  it(\"should initialize visualizerOutput as empty\", () => {\n    expect(component.visualizerOutput).toBe(\"\");\n  });\n  it(\"should initialize syntaxTreeJson as empty\", () => {\n    expect(component.syntaxTreeJson).toBe(\"\");\n  }); // Test Case 3: Method Functionality\n\n  it(\"astToFormula should convert AST to formula string\", () => {\n    const mockAST = {\n      type: \"ADDITION\",\n      left: {\n        type: \"NUMBER\",\n        value: 2\n      },\n      right: {\n        type: \"NUMBER\",\n        value: 3\n      }\n    };\n    const formulaString = component.astToFormula(mockAST);\n    expect(formulaString).toBe(\"2 + 3\");\n  }); // Test Case 4: Template Rendering\n\n  it(\"should render title in a h1 tag\", () => {\n    const compiled = fixture.nativeElement;\n    expect(compiled.querySelector(\"h1\").textContent).toContain(\"Welcome to the Formulizer!\");\n  });\n  it(\"should display the default formula in the textarea\", () => {\n    const textarea = fixture.nativeElement.querySelector(\"textarea\");\n    expect(textarea.value).toBe(\"($b + SQRT(SQR($b) - 4 * $a)) / (2 * $a)\");\n  });\n  it(\"should update visualizerOutput when convertAstToFormula is called\", () => {\n    const mockAST = {\n      type: \"ADDITION\",\n      left: {\n        type: \"NUMBER\",\n        value: 2\n      },\n      right: {\n        type: \"NUMBER\",\n        value: 3\n      }\n    }; // spyOn(formulaService, \"syntaxTreeSource\").and.returnValue(of(mockAST));\n\n    component.convertAstToFormula();\n    expect(component.visualizerOutput).toBe(\"2 + 3\");\n  });\n});","map":{"version":3,"sources":["/home/ubuntu/Project/Saurabh-Pers/calculator/src/app/app.component.spec.ts"],"names":["TestBed","async","FormsModule","of","AppComponent","FormulaBuilderService","MockFormulaBuilderService","constructor","syntaxTree$","setSyntaxTree","tree","deleteNode","path","describe","component","fixture","formulaService","beforeEach","configureTestingModule","declarations","imports","providers","provide","useClass","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","formula","toEqual","visualizerOutput","toBe","syntaxTreeJson","mockAST","type","left","value","right","formulaString","astToFormula","compiled","nativeElement","querySelector","textContent","toContain","textarea","convertAstToFormula"],"mappings":"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","sourcesContent":["// app.component.spec.ts\nimport { TestBed, async } from \"@angular/core/testing\";\nimport { FormsModule } from \"@angular/forms\"; // Import FormsModule for ngModel\nimport { of } from \"rxjs\";\nimport { AppComponent } from \"./app.component\";\nimport { FormulaBuilderService } from \"./services/formula-builder.service\";\n// Create a mock FormulaBuilderService\nclass MockFormulaBuilderService {\n    constructor() {\n        this.syntaxTree$ = of(null);\n    }\n    setSyntaxTree(tree) {\n        // Mock implementation: Do nothing\n    }\n    deleteNode(path) {\n        // Mock implementation: Do nothing\n    }\n}\ndescribe(\"AppComponent\", () => {\n    let component;\n    let fixture;\n    let formulaService;\n    beforeEach(async(() => {\n        TestBed.configureTestingModule({\n            declarations: [AppComponent],\n            imports: [FormsModule],\n            providers: [\n                {\n                    provide: FormulaBuilderService,\n                    useClass: MockFormulaBuilderService,\n                }, // Provide the mock service\n            ],\n        }).compileComponents();\n    }));\n    beforeEach(() => {\n        fixture = TestBed.createComponent(AppComponent);\n        component = fixture.componentInstance;\n        formulaService = TestBed.inject(FormulaBuilderService);\n        fixture.detectChanges(); // Trigger initial data binding\n    });\n    // Test Case 1: Component Creation\n    it(\"should create the app\", () => {\n        expect(component).toBeTruthy();\n    });\n    // Test Case 2: Initial Property Values\n    it(\"should have the default formula\", () => {\n        expect(component.formula).toEqual(\"($b + SQRT(SQR($b) - 4 * $a)) / (2 * $a)\");\n    });\n    it(\"should initialize visualizerOutput as empty\", () => {\n        expect(component.visualizerOutput).toBe(\"\");\n    });\n    it(\"should initialize syntaxTreeJson as empty\", () => {\n        expect(component.syntaxTreeJson).toBe(\"\");\n    });\n    // Test Case 3: Method Functionality\n    it(\"astToFormula should convert AST to formula string\", () => {\n        const mockAST = {\n            type: \"ADDITION\",\n            left: { type: \"NUMBER\", value: 2 },\n            right: { type: \"NUMBER\", value: 3 },\n        };\n        const formulaString = component.astToFormula(mockAST);\n        expect(formulaString).toBe(\"2 + 3\");\n    });\n    // Test Case 4: Template Rendering\n    it(\"should render title in a h1 tag\", () => {\n        const compiled = fixture.nativeElement;\n        expect(compiled.querySelector(\"h1\").textContent).toContain(\"Welcome to the Formulizer!\");\n    });\n    it(\"should display the default formula in the textarea\", () => {\n        const textarea = fixture.nativeElement.querySelector(\"textarea\");\n        expect(textarea.value).toBe(\"($b + SQRT(SQR($b) - 4 * $a)) / (2 * $a)\");\n    });\n    it(\"should update visualizerOutput when convertAstToFormula is called\", () => {\n        const mockAST = {\n            type: \"ADDITION\",\n            left: { type: \"NUMBER\", value: 2 },\n            right: { type: \"NUMBER\", value: 3 },\n        };\n        // spyOn(formulaService, \"syntaxTreeSource\").and.returnValue(of(mockAST));\n        component.convertAstToFormula();\n        expect(component.visualizerOutput).toBe(\"2 + 3\");\n    });\n});\n"]},"metadata":{},"sourceType":"module"}