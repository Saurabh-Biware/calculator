{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport let FormulaBuilderService = /*#__PURE__*/(() => {\n  class FormulaBuilderService {\n    constructor() {\n      this.syntaxTreeSource = new BehaviorSubject(null);\n      this.syntaxTree$ = this.syntaxTreeSource.asObservable();\n    }\n\n    setSyntaxTree(tree) {\n      this.syntaxTreeSource.next(tree);\n    }\n\n    deleteNode(path) {\n      if (!path || path.length === 0) return;\n      const tree = this.syntaxTreeSource.getValue();\n      if (!tree) return;\n      const clonedTree = JSON.parse(JSON.stringify(tree)); // Traverse to the parent of the node to delete\n\n      let parent = clonedTree;\n\n      for (let i = 0; i < path.length - 1; i++) {\n        parent = parent[path[i]];\n        if (!parent) return;\n      } // Delete the target node\n\n\n      const keyToDelete = path[path.length - 1];\n\n      if (Array.isArray(parent)) {\n        parent.splice(Number(keyToDelete), 1);\n      } else {\n        const nodeToDelete = parent[keyToDelete];\n        console.log(nodeToDelete);\n\n        if (nodeToDelete.type === \"PAREN\") {\n          // Completely remove the PAREN node and its contents\n          delete parent[keyToDelete];\n        } else {\n          // Delete other node types normally\n          delete parent[keyToDelete];\n        }\n      } // Update the syntax tree\n\n\n      this.setSyntaxTree(clonedTree);\n    }\n\n  }\n\n  FormulaBuilderService.ɵfac = function FormulaBuilderService_Factory(t) {\n    return new (t || FormulaBuilderService)();\n  };\n\n  FormulaBuilderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormulaBuilderService,\n    factory: FormulaBuilderService.ɵfac,\n    providedIn: \"root\"\n  });\n  return FormulaBuilderService;\n})();","map":null,"metadata":{},"sourceType":"module"}